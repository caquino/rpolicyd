#!/usr/bin/env ruby
# Postfix policy delegation daemon
# Authors: Cassiano Aquino <caquino@ebrain.com.br> / Lucas Fontes <lucas@dimension.com.br>
# 05/2008
# Version: 0.1

require 'rubygems'
require 'rake'
require 'socket'
require 'optparse'
require 'ostruct'
require 'pp'
require 'fcntl'

PLUGINDIR='./plugins'

def pflush(string,queueid="")
	print Time.now.strftime("[%a %b %e %H:%M:%S %Y] ") + "#{queueid} #{string}\n"
	STDOUT.flush
end

class OptParse

	def self.parse(args)
		options = OpenStruct.new
		options.port = 7777
		options.listen = '127.0.0.1'
		options.verbose = false

		opts = OptionParser.new do |opts|
			opts.banner = "Usage: policy.rb [options]"
			opts.separator ""
			opts.separator "Specific options:"

			opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
				options.verbose = v
			end

			opts.on("-p", "--port N", Float, "Define TCP port to listen") do |v|
				options.port = v
			end

			opts.on("-l", "--listen N", "Define the IP address to listen") do |v|
				options.listen = v
			end

		end
		opts.parse!(args)
		options
	end  

end  

module PluginSugar
  def def_field(*names)
    class_eval do 
      names.each do |name|
        define_method(name) do |*args| 
          case args.size
          when 0: instance_variable_get("@#{name}")
          else    instance_variable_set("@#{name}", *args)
          end
        end
      end
    end
  end
end


class Plugin
	@registered_plugins = {}

	class << self
		attr_reader :registered_plugins
		private :new
	end

	def self.define(name,&block)
		p = new
		p.instance_eval(&block)
		p.init
		Plugin.registered_plugins[name] = p
	end

	extend PluginSugar
	def_field :author, :version, :type
end

class PDPHandler

	def initialize(host, port, debug=false)
		@port = port
		@host = host
		@debug = debug
	end

	def start
		@server = TCPServer.new(@host,@port)
		pflush("Starting the main loop")
		while true
			stream @server.accept
		end
	end

	def stream(session)
		@port = session.peeraddr[1]
		@name = session.peeraddr[2]
		@addr = session.peeraddr[3]
		@start = Time.now
		@processed = 0
		pflush("New connection from #{@addr}:#{@port}")
		Thread.new {
			begin
				Dir["#{PLUGINDIR}/*.rb"].each do |@x| 
					pflush("Loading plugin #{@x}") if @debug
					load @x
				end
				while (@buffer = session.gets("\r\n\r\n"))
					@map = {}
					@buffer.split("\n").each do |@line|
						if @line.chomp.size > 0
							if @line.index('=')
								@key, @value = @line.split('=')
								@map[@key] = @value.chomp
								pflush("Got line: #{@line}") if @debug
							else
								pflush("Got bad line: #{@line}") if @debug
							end
						elsif @map.length > 0
							@processed = @processed + 1
							pflush("Submiting session to plugin process", @map['queue_id']) if @debug
							# process plugins pegar o @key do xml e boa :D
							# Plugin.registed_plugins.[key_do_xml].process
							Plugin.registered_plugins.each do |@key, @plugin|
								pflush("Running #{@key}") if @debug
								@plugin.process @map
							end
						end
					end
				end
			rescue Exception => ex
				pflush("#{ex.class}: #{ex.message}\n\t#{ex.backtrace}")
			ensure
				@finish = Time.now - @start
				pflush("Client disconnection #{@addr}:#{@port} processed #{@processed} messages in #{@finish} (#{@processed/@finish})")
				Plugin.registered_plugins.each do |@key, @plugin|
					@plugin.terminate
				end
				@session.close unless @session.closed?
			end
		}
	end

end

options = OptParse.parse(ARGV)
pflush("Starting listening on #{options.listen} port #{options.port}")


PDPHandler.new(options.listen,options.port,options.verbose).start
